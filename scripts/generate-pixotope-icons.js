#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Script to automatically generate pixotopeIcons.ts from files in public/icons/pixotope/
 * Run with: node scripts/generate-pixotope-icons.js
 */

const PIXOTOPE_ICONS_DIR = path.join(__dirname, '../packages/fossflow-app/public/icons/pixotope');
const OUTPUT_FILE = path.join(__dirname, '../packages/fossflow-app/src/pixotopeIcons.ts');
const CONFIG_FILE = path.join(PIXOTOPE_ICONS_DIR, 'config.json');

// Supported image extensions
const SUPPORTED_EXTENSIONS = ['.png', '.jpg', '.jpeg', '.svg'];

function generateIconName(filename) {
  // Convert filename to a readable name
  // e.g., "led_wall.png" -> "LED Wall"
  const nameWithoutExt = path.parse(filename).name;
  return nameWithoutExt
    .split(/[-_]/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

function generateIconId(filename) {
  // Convert filename to a valid ID
  // e.g., "led_wall.png" -> "pixotope-led-wall"
  const nameWithoutExt = path.parse(filename).name;
  return `pixotope-${nameWithoutExt.replace(/[_\s]/g, '-').toLowerCase()}`;
}

function loadConfig() {
  const defaultConfig = {
    defaultSettings: {
      collection: 'PIXOTOPE',
      isIsometric: true,
      scale: 1.0
    },
    iconOverrides: {}
  };

  if (fs.existsSync(CONFIG_FILE)) {
    try {
      const configContent = fs.readFileSync(CONFIG_FILE, 'utf8');
      return { ...defaultConfig, ...JSON.parse(configContent) };
    } catch (error) {
      console.warn('Warning: Could not parse config.json, using defaults');
      return defaultConfig;
    }
  }
  
  return defaultConfig;
}

function generatePixotopeIcons() {
  try {
    // Check if directory exists
    if (!fs.existsSync(PIXOTOPE_ICONS_DIR)) {
      console.error(`Error: Directory ${PIXOTOPE_ICONS_DIR} does not exist`);
      process.exit(1);
    }

    // Load configuration
    const config = loadConfig();

    // Read all files in the pixotope icons directory
    const files = fs.readdirSync(PIXOTOPE_ICONS_DIR);
    
    // Filter for supported image files (exclude README and other non-image files)
    const iconFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return SUPPORTED_EXTENSIONS.includes(ext);
    });

    if (iconFiles.length === 0) {
      console.warn('No icon files found in the pixotope directory');
      return;
    }

    // Sort files alphabetically for consistent output
    iconFiles.sort();

    // Generate icon objects
    const icons = iconFiles.map(filename => {
      const override = config.iconOverrides[filename] || {};
      
      return {
        id: generateIconId(filename),
        name: override.name || generateIconName(filename),
        url: `/icons/pixotope/${filename}`,
        collection: override.collection || config.defaultSettings.collection,
        isIsometric: override.isIsometric !== undefined ? override.isIsometric : config.defaultSettings.isIsometric,
        scale: override.scale || config.defaultSettings.scale
      };
    });

    // Generate the TypeScript file content
    const fileContent = `// Auto-generated file - DO NOT EDIT MANUALLY
// Generated by: scripts/generate-pixotope-icons.js
// Run 'npm run generate:pixotope-icons' to regenerate
//
// To add new icons:
// 1. Add your icon files to packages/fossflow-app/public/icons/pixotope/
// 2. Run: npm run generate:pixotope-icons
// 3. Restart your development server

export default ${JSON.stringify(icons, null, 2)};
`;

    // Write the file
    fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf8');

    console.log(`âœ… Generated pixotopeIcons.ts with ${icons.length} icons:`);
    icons.forEach(icon => {
      console.log(`   - ${icon.name} (${icon.id})`);
    });
    
    console.log(`\nðŸ’¡ To see the new icons, restart your development server`);
    
  } catch (error) {
    console.error('Error generating pixotope icons:', error);
    process.exit(1);
  }
}

// Run the script
generatePixotopeIcons();
